@model ContainersWeb.Models.ContainerTracking

@using Resources

<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
    <h4 class="modal-title" id="myModalLabel">@Resources.Edit</h4>
</div>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="modal-body">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ContainerTrackingId)

        <div class="error">
            <p>@ViewBag.Message</p>        
        </div>
        <div class="row form-row">
            <div class="col-md-6">
                <label class="form-label">@Resources.Tracking</label>
                @Html.EnumDropDownListFor(model => model.TrackingType, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TrackingType, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-6">
                <label class="form-label">@Resources.Type</label>
                @Html.EnumDropDownListFor(model => model.Type, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row form-row">
            <div class="col-md-4">
                <label class="form-label">@Resources.ContainerStatus</label>
                @Html.EnumDropDownListFor(model => model.ContainerStatus, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ContainerStatus, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4">
                <label class="form-label">@Resources.Gate</label>
                @Html.DropDownList("GateId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.GateId, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4">
                <label class="form-label">@Resources.DocNumber</label>
                @Html.EditorFor(model => model.DocNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DocNumber, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row form-row">
            <div class="col-md-6">
                <label class="form-label">@Resources.LicensePlate</label>
                @Html.EditorFor(model => model.ContainerLicensePlate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ContainerLicensePlate, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-6">
                <label class="form-label">@Resources.Number</label>
                @Html.EditorFor(model => model.ContainerNumber, new { htmlAttributes = new { @class = "form-control contenedor" } })
                @Html.ValidationMessageFor(model => model.ContainerNumber, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row form-row">
            <div class="col-md-6">
                <label class="form-label">@Resources.Origin</label>
                @Html.DropDownList("CompanyOriginId", null, "Seleccionar", htmlAttributes: new { @class = "select-drop" })
                @Html.ValidationMessageFor(model => model.CompanyOriginId, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-6">
                <label class="form-label">@Resources.Destination</label>
                @Html.DropDownList("CompanyDestinationId", null, "Seleccionar", htmlAttributes: new { @class = "select-drop" })
                @Html.ValidationMessageFor(model => model.CompanyDestinationId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row form-row">
            <div class="col-md-6">
                <label class="form-label">@Resources.ContainerLabel</label>
                @Html.EditorFor(model => model.ContainerLabel, new { htmlAttributes = new { @class = "form-control pv" } })
                @Html.ValidationMessageFor(model => model.ContainerLabel, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-6">
                <label class="form-label">@Resources.CorrelAduana</label>
                @Html.EditorFor(model => model.CorrelAduana, new { htmlAttributes = new { @class = "form-control pv" } })
                @Html.ValidationMessageFor(model => model.CorrelAduana, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row form-row">
            <div class="col-md-6">
                <label class="form-label">@Resources.DUA</label>
                @Html.EditorFor(model => model.DUA, new { htmlAttributes = new { @class = "form-control pv" } })
                @Html.ValidationMessageFor(model => model.DUA, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-6">
                <label class="form-label">@Resources.SercuritySupervisor</label>
                @Html.DropDownList("SecuritySupervisorId", null, "Seleccionar", htmlAttributes: new { @class = "select-drop" })
                @Html.ValidationMessageFor(model => model.SecuritySupervisorId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row form-row">
            <div class="col-md-6">
                <label class="form-label">@Resources.Driver</label>
                @Html.DropDownList("DriverId", null, "Seleccionar", htmlAttributes: new { @class = "select-drop" })
                @Html.ValidationMessageFor(model => model.DriverId, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-6">
                <label class="form-label">@Resources.Identification</label>
                <input id="Identification" name="Identification" class="form-control" readonly="readonly" />
            </div>
        </div>
        <div class="row form-row observations">
            <div class="col-md-12">
                <label class="form-label">@Resources.Observations</label>
                @Html.TextAreaFor(model => model.Observations, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Observations, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row form-row">
            <div class="col-md-6">
                <label class="form-label">@Resources.InsertedDate</label>
                @Html.EditorFor(model => model.InsertedAt, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.UpdatedAt, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-6">
                <label class="form-label">@Resources.InsertedBy</label>
                @Html.EditorFor(model => model.InsertedBy, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.InsertedBy, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row form-row">
            <div class="col-md-6">
                <label class="form-label">@Resources.UpdatedDate</label>
                @Html.EditorFor(model => model.UpdatedAt, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.UpdatedAt, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-6">
                <label class="form-label">@Resources.UpdatedBy</label>
                @Html.EditorFor(model => model.UpdatedBy, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.UpdatedBy, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="modal-footer">
        <button class="btn" type="button" data-dismiss="modal">@Resources.Cancel</button>
        <input class="btn btn-primary" type="submit" value="@Resources.Save" />
    </div>
}

<script type="text/javascript">

    function validate() {
        var containerStatus = $('#ContainerStatus').val(); //{ Lleno = 1, Vacio = 0 }
        var trackingType = $('#TrackingType').val(); //{ Contenedor = 0, Camion = 1, Rastra = 3, Vehiculo = 4, Moto = 5, Courier = 2 }
        var DocStatus = $('#DocStatus').val();
        var type = $('#Type').val(); //{ Entrada = 1, Salida = 0 }


        //si el contenedor esta lleno entonces muestra unos campos extra
        if (containerStatus == 0 || containerStatus == 'Vacio') {
            $('.pv').prop('readonly', true);
        } else {
            $('.pv').prop('readonly', false);
        }

        if (type == 1 || type == 'Entrada') {
            $('#ContainerNumber').prop('readonly', false);
            $('#DocNumber').val('');
            $('#DocNumber').prop('readonly', true);
        } else {
            $('#ContainerNumber').prop('readonly', true);
            $('#DocNumber').prop('readonly', false);
        }

        if (trackingType == 1 || trackingType == 'Camion') {
            $('.contenedor').prop('readonly', true);
        } else {
            $('.contenedor').prop('readonly', false);
        }

        if (trackingType == 0 || trackingType == 'Contenedor') {
            $('.observations').hide();
        } else {
            $('.observations').show();
        }

    };


    function GetDriverId(id) {
        $.ajax({
            url: '@Url.Action("GetDriverById", "ContainerTrackings")',
            type: "GET",
            data: { id: id },
            dataType: "json",
            async: false,
            success: function (data) {
                $('#Identification').val(data);
            },
            error: function (xhr) {
                alert(xhr.responseText);
            }
        });
    };


    $(document).ready(function () {

        validate();

        var driver = $('#DriverId').val();
        if (driver > 0) {
            GetDriverId(driver);
        }
        //debugger;
        $('#DriverId').change(function () {
            GetDriverId(this.value);
        });

        $('#TrackingType').change(function () {
            validate();
        });

        $('#Type').change(function () {
            validate();
        });

        $('#ContainerStatus').change(function () {
            validate();
        });

        $('.select-drop').select2();

    });
</script>
